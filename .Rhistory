knitr::opts_chunk$set(echo = TRUE)
4 + 6 - (24/6)
5 ^ 2 + 2 * 2
x <- 5:10
b <- x[2]
b
data.class(my.data$sale.amount)
dim(my.data) # prints the dimensions of 'my.data'
# This is how to load the data for any location so long as the pat is correct
# my.data <- read.csv("H://path_to_my_data/my_data.csv")
# This reads the data if it is in the same folder as this lab
my.data <- read.csv("IowaCityHomeSales.csv")
# This reads the data in if it is in a data folder that is subsetted within the lab folder
# my.data <- read.csv("data/IowaCityHomeSales.csv")
dim(my.data) # prints the dimensions of 'my.data'
nrow(my.data) # prints the number of rows of 'my.data'
ncol(my.data) # prints the number of columns of 'my.data'
colnames(my.data) # prints the sames of the variables (columns) of 'mydata'
data.class(my.data$sale.amount)
data.class(my.data$bsmt)
x <- (1 > 3)
x
data.class(x)
table(my.data$style) # A one-way frequency table of 'style'
table(my.data$bedrooms, my.data$bsmt) # A two-way frequency table of 'bedrooms' and 'bsmt'
# Notice that 'bedrooms' is stored as a numeric variable,
# but it still can be used in the table function
my.table <- table(my.data$bsmt) # Tables can be stored as objects
barplot(my.table) # Creates a bar plot from a table
hist(my.data$sale.amount) # Histograms are for numeric variables
mean(my.data$sale.amount) # mean
sd(my.data$sale.amount) # standard deviation
min(my.data$sale.amount) # minimum
max(my.data$sale.amount) # maximum
quantile(my.data$sale.amount, .35) # the 35th percentile
summary(my.data$sale.amount)
install.packages("ggplot2")
library(ggplot2)
qplot(my.data$ac) # qplot is a function in the package ggplot2
install.packages("rmarkdown")
library("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
Dat <- read.csv("CollegeData.csv")
quantile(Dat$COSTT4_A, .20)
log.sal <- c(AVGFACSAL)
log.sal <- c(Dat$AVGFACSAL)
log.sal <- c(Dat$AVGFACSAL)
log.sal <- c(Dat$AVGFACSAL)
summary(log.sal)
historgram(log.sal)
hist(log.sal)
table(Dat$REGION, Dat$LOCALE)
library(ggplot2)
table(Dat$REGION, Dat$LOCALE)
qplot(Dat$REGION)
Iowa.dat <- Dat[Dat$STABBR == "IA",]
dim(Iowa.dat)
?function
?function()
#install.packages("tidyverse")
library(tidyverse)     # contains tools to tidy data
#install.packages("tidyverse")
library(tidyverse)     # contains tools to tidy data
UBSprices <- read.csv("data/UBSprices.csv", as.is = TRUE)
UBSprices <- read.csv("UBSprices.csv", as.is = TRUE)
polls <- read.csv("polls.csv", na.strings = "--", as.is = TRUE)
airlines <- read.csv("airlines.csv", as.is = TRUE)
UBSprices <- read.csv("UBSprices.csv", as.is = TRUE)
polls <- read.csv("polls.csv", na.strings = "--", as.is = TRUE)
airlines <- read.csv("airlines.csv", as.is = TRUE)
head(UBSprices)
tidy_ubs <- gather(data = UBSprices, key = year, value = price, rice2003, rice2009)
head(tidy_ubs)
dim(UBSprices)
dim(tidy_ubs)
tidy_ubs$year <- parse_number(tidy_ubs$year)
head(tidy_ubs)
qplot(data=tidy_ubs, x= factor(year), y=price, geom="boxplot")
polls
tidy_polls <- separate(data = polls, col = Date, into = c("Begin", "End"), sep = " - ")
tidy_polls
tidy_polls <- separate(data = tidy_polls, col = Sample, into = c("size", "population"), sep = " ")
tidy_polls
tidy_polls <- gather(data = tidy_polls, key = candidate, value = percentage, 7:10)
head(tidy_polls)
tidy_polls <- separate(tidy_polls, candidate, into= c("candidate", "party"))
tidy_polls
head(airlines)
tidy_airlines <- gather(airlines, key = accidents, value = count, 3:8)
head(tidy_airlines)
tidy_airlines <- separate(tidy_airlines, accidents, into = c("var", "years"), sep = "[.]")
head(tidy_airlines)
tidy_airlines <- spread(data = tidy_airlines, key = var, value = count)
head(tidy_airlines)
read_csv("https://raw.githubusercontent.com/ds4stats/r-tutorials/master/tidying-data/data/daily_show_guests.csv")
tidy_airlines <- gather(airlines, key = accidents, value = count, 3:8)
?gather
?gather()
#install.packages("tidyverse")
library(tidyverse)     # contains tools to tidy data
?gather()
tidy_airlines <- gather(airlines, key = accidents, value = count, 3:8)
head(tidy_airlines)
?separate()
?parase_number()
?parse_number()
?replace()
?separate()
setwd("~/Documents/GitHub/CS324IndividualProject")
shiny::runApp()
rsconnect::setAccountInfo(name='nawamasa',
token='9DA6496D1B37D1BB10DDBC904739E5F2',
secret='eN2i1K/a1biTX7TK/rEyZ/gUYbrb0MOzgxwyhxlY')
